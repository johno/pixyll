# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

  variables:
  - name: imageName
    value: jekyll/builder
  - name: jekyllVersion
    value: 3.8

steps:
# Checkout is done automatically but here for readability
- checkout: self

# Why was this build executed
#- bash: |
#    case $BUILD_REASON in
#            "Manual") echo "$BUILD_REQUESTEDFOR manually queued the build." ;;
#            "IndividualCI") echo "This is a CI build for $BUILD_REQUESTEDFOR." ;;
#            "BatchedCI") echo "This is a batched CI build for $BUILD_REQUESTEDFOR." ;;
#        *) $BUILD_REASON ;;
#    esac
#  condition: eq( variables['Agent.OS'], 'Linux' )
#  displayName: Get Build Reason

- script: |
    GIT_COMMIT=$( git rev-parse --short HEAD )
    VERSION=$( cat VERSION )
    echo "##vso[task.setvariable variable=commitHash;isOutput=true]$GIT_COMMIT"
    echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
  name: setVar
  displayName: Set runtime variables for pipeline

#- script: |
#    VERSION=$( cat VERSION )
#    echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
#  name: setVersion

# Build and Push container to DockerHub
- script: |
    echo "GIT_COMMIT: $(setVar.commitHash)"
    echo "VERSION=$(setVar.version)"
  displayName: Echo pipeline dynamic variables

# Build Jekyll Website
- script: |
    mkdir _site
    touch Gemfile.lock
    chmod a+w Gemfile.lock
    echo "Docker Run"
    docker run --rm \
        --volume="$PWD:/srv/jekyll" \
        --volume="$PWD/vendor/bundle:/usr/local/bundle" \
        -i jekyll/builder:3.8 \
        jekyll build

# Copy Website to Storage Acct# Copy Website to Storage Acct
# Azure CLI
# Publish website to ACI
# - task: AzureCLI@1
#   displayName: Copy data to storage acct
#   inputs:
#     azureSubscription: imperfect
#     scriptLocation: inlineScript
#     inlineScript: |
#       echo "Running az script."
#       az storage blob upload-batch \
#         --destination \$web \
#         --account-name "azurepatterns" \
#         --source "_site"

- task: CopyFiles@2
  inputs:
    contents: '_site/**'
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: UniversalPackages@0
  displayName: Universal Publish
  inputs:
    command: publish
    publishDirectory: '$(Build.ArtifactStagingDirectory)'
    vstsFeedPublish: 'www-imperfect'
    vstsFeedPackagePublish: 'www'
    packagePublishDescription: 'Website Build'
    versionOption: patch
    #versionPublish: $(setVar.commitHash)

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: WWWBuildOutput

#Purge CDN to update content
# - task: AzureCLI@1
#   displayName: purge CDN contents
#   inputs:
#     azureSubscription: imperfect
#     scriptLocation: inlineScript
#     inlineScript: |
#        echo "Purging cdn content"
#        az cdn endpoint purge \
#         --name azurepatterns \
#         --profile-name azurepatternscdn \
#         --resource-group azurepatterns \
#         --content-paths '/*'

