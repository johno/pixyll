strip.background = element_rect(fill = "grey80",
colour = "grey50",
size = 0.2))
}
p + theme_pub()
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library("ggpubr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ggpubr)
p
theme_publish <- function(base_size = 12) {
structure(list(
axis.line =         theme_blank(),
axis.text.x =       theme_text(size = base_size * 0.8 , lineheight = 0.9, vjust = 1),
axis.text.y =       theme_text(size = base_size * 0.8, lineheight = 0.9, hjust = 1),
axis.ticks =        theme_segment(colour = "black", size = 0.2),
axis.title.x =      theme_text(size = base_size, vjust = 1),
axis.title.y =      theme_text(size = base_size, angle = 90, vjust = 0.5),
axis.ticks.length = unit(0.3, "lines"),
axis.ticks.margin = unit(0.5, "lines"),
legend.background = theme_rect(colour=NA),
legend.key =        theme_rect(colour = "grey80"),
legend.key.size =   unit(1.2, "lines"),
legend.text =       theme_text(size = base_size * 0.8,family = "sans"),
legend.title =      theme_text(size = base_size * 0.8, face = "bold", hjust = 0),
legend.position =   "right",
panel.background =  theme_rect(fill = "white", colour = NA),
panel.border =      theme_rect(fill = NA, colour="grey50"),
panel.grid.major =  theme_blank(),
panel.grid.minor =  theme_blank(),
panel.margin =      unit(0.25, "lines"),
strip.background =  theme_rect(fill = "grey80", colour = "grey50"),
strip.text.x =      theme_text(size = base_size * 0.8),
strip.text.y =      theme_text(size = base_size * 0.8, angle = -90),
plot.background =   theme_rect(colour = NA),
plot.title =        theme_text(size = base_size * 1.2),
plot.margin =       unit(c(1, 1, 0.5, 0.5), "lines")
), class = "options")
}
p + theme_publish()
theme_publish <- function(base_size = 12) {
structure(list(
axis.line =         theme_blank(),
axis.text.x =       theme_text(size = base_size * 0.8 , lineheight = 0.9, vjust = 1),
axis.text.y =       theme_text(size = base_size * 0.8, lineheight = 0.9, hjust = 1),
axis.ticks =        theme_segment(colour = "black", size = 0.2),
axis.title.x =      theme_text(size = base_size, vjust = 1),
axis.title.y =      theme_text(size = base_size, angle = 90, vjust = 0.5),
axis.ticks.length = unit(0.3, "lines"),
axis.ticks.margin = unit(0.5, "lines"),
legend.background = theme_rect(colour=NA),
legend.key =        theme_rect(colour = "grey80"),
legend.key.size =   unit(1.2, "lines"),
legend.text =       theme_text(size = base_size * 0.8,family = "sans"),
legend.title =      theme_text(size = base_size * 0.8, face = "bold", hjust = 0),
legend.position =   "right",
panel.background =  theme_rect(fill = "white", colour = NA),
panel.border =      theme_rect(fill = NA, colour="grey50"),
panel.grid.major =  theme_blank(),
panel.grid.minor =  theme_blank(),
panel.margin =      unit(0.25, "lines"),
strip.background =  theme_rect(fill = "grey80", colour = "grey50"),
strip.text.x =      theme_text(size = base_size * 0.8),
strip.text.y =      theme_text(size = base_size * 0.8, angle = -90),
plot.background =   theme_rect(colour = NA),
plot.title =        theme_text(size = base_size * 1.2),
plot.margin =       unit(c(1, 1, 0.5, 0.5), "lines")
), class = "options")
}
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(grid)
library(factoextra)
library(cluster)
library(NbClust)
setwd("/Users//ChrisStroud/Documents/data-science/R/Projects/Airbnb-sf/")
df <- read.csv("data.csv")
####
dfscore <- df %>%
select(neighbourhood_cleansed,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value)  %>%
na.omit()
# Rename columns
names(dfscore) <- c("hood","accuracy","cleanliness", "checkin", "communication","location", "value")
# Calculate average scores by neighborhood
dfscore <- dfscore %>%
group_by(hood) %>%
summarise(
accuracy = mean(accuracy),
cleanliness = mean(cleanliness),
checkin = mean(checkin),
communication = mean(communication),
location = mean(location),
value = mean(value)
)
rownames(dfscore) <- dfscore$hood
rownames(dfscore) <- dfscore$hood
View(dfscore)
dfscore$hood <- NULL
nb <- NbClust(dfscore, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
p < - fviz_nbclust(nb)
p + theme_publish()
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(factoextra)
library(cluster)
library(NbClust)
nb <- NbClust(dfscore, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
fviz_nbclust(nb)
p + theme_publish()
p + theme_publish()
theme_publish <- function(base_size = 12) {
structure(list(
axis.line =         theme_blank(),
axis.text.x =       theme_text(size = base_size * 0.8 , lineheight = 0.9, vjust = 1),
axis.text.y =       theme_text(size = base_size * 0.8, lineheight = 0.9, hjust = 1),
axis.ticks =        theme_segment(colour = "black", size = 0.2),
axis.title.x =      theme_text(size = base_size, vjust = 1),
axis.title.y =      theme_text(size = base_size, angle = 90, vjust = 0.5),
axis.ticks.length = unit(0.3, "lines"),
axis.ticks.margin = unit(0.5, "lines"),
legend.background = theme_rect(colour=NA),
legend.key =        theme_rect(colour = "grey80"),
legend.key.size =   unit(1.2, "lines"),
legend.text =       theme_text(size = base_size * 0.8,family = "sans"),
legend.title =      theme_text(size = base_size * 0.8, face = "bold", hjust = 0),
legend.position =   "right",
panel.background =  theme_rect(fill = "white", colour = NA),
panel.border =      theme_rect(fill = NA, colour="grey50"),
panel.grid.major =  theme_blank(),
panel.grid.minor =  theme_blank(),
panel.margin =      unit(0.25, "lines"),
strip.background =  theme_rect(fill = "grey80", colour = "grey50"),
strip.text.x =      theme_text(size = base_size * 0.8),
strip.text.y =      theme_text(size = base_size * 0.8, angle = -90),
plot.background =   theme_rect(colour = NA),
plot.title =        theme_text(size = base_size * 1.2),
plot.margin =       unit(c(1, 1, 0.5, 0.5), "lines")
), class = "options")
}
p + theme_publish()
install.packages("cowplot")
require(cowplot)
library(cowplot)
p
p + theme_cowplot()
load_data(mpg)
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
p + theme_bw
p + theme_bw()
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(cowplot)
library(factoextra)
library(cluster)
library(NbClust)
####
# Data from: http://insideairbnb.com/get-the-data.html
# File name: data.csv
setwd("/Users//ChrisStroud/Documents/data-science/R/Projects/Airbnb-sf/")
df <- read.csv("data.csv")
####
###
# Munge
# Selecting data for analysis
dfscore <- df %>%
select(neighbourhood_cleansed,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value)  %>%
na.omit()
# Rename columns
names(dfscore) <- c("hood","accuracy","cleanliness", "checkin", "communication","location", "value")
# Calculate average scores by neighborhood
dfscore <- dfscore %>%
group_by(hood) %>%
summarise(
accuracy = mean(accuracy),
cleanliness = mean(cleanliness),
checkin = mean(checkin),
communication = mean(communication),
location = mean(location),
value = mean(value)
)
# Create row names
rownames(dfscore) <- dfscore$hood
# Remove hood column
dfscore$hood <- NULL
###
###
# How many clusters is optimal?
nb <- NbClust(dfscore, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
fviz_nbclust(nb)
require(cowplot)
p + theme_cowplot()
chol <- read.table(url("http://assets.datacamp.com/blog_assets/chol.txt"), header = TRUE)
km.res <- kmeans(dfscore, 4, nstart = 25)
plot(dfscore, col = km.res$cluster, pch = 19, frame = FALSE,
main = "K-means with k = 4")
points(km.res$centers, col = 1:4, pch = 8, cex = 3)
###
# K-means
# http://www.sthda.com/english/wiki/determining-the-optimal-number-of-clusters-3-must-known-methods-unsupervised-machine-learning
# K-means clustering
set.seed(123)
km.res <- kmeans(dfscore, 3, nstart = 25)
# k-means group number of each observation
km.res$cluster
# Visualize k-means clusters
fviz_cluster(km.res, data = dfscore, geom = "point",
stand = FALSE, frame.type = "norm")
# PAM clustering
pam.res <- pam(dfscore, 3)
pam.res$cluster
# Visualize pam clusters (less subjsctive to outliers)
fviz_cluster(pam.res, stand = FALSE, geom = "point",
frame.type = "norm")
###
# HIEARCHICAL CLUSTERING
# Model
dd <- dist(scale(dfscore), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
### DENOGRAM
# vector of colors labelColors = c('red', 'blue', 'darkgreen', 'darkgrey',
# 'purple')
labelColors = c("#CDB380", "#036564", "#EB6841", "#EDC951")
# cut dendrogram in 4 clusters
clusMember = cutree(hc, 7)
# function to get color labels
colLab <- function(n) {
if (is.leaf(n)) {
a <- attributes(n)
labCol <- labelColors[clusMember[which(names(clusMember) == a$label)]]
attr(n, "nodePar") <- c(a$nodePar, lab.col = labCol)
}
n
}
# using dendrapply
clusDendro = dendrapply(hcd, colLab)
# make plot
par(mar=c(1,1,1,10)+.1)
plot(clusDendro,main = "Title", type = "triangle", horiz=TRUE)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
pkgs <- c("cluster",  "NbClust")
install.packages(pkgs)
###
ggplot(data=chol, aes(chol$AGE)) + geom_histogram()
ggplot(data=chol, aes(chol$AGE)) + geom_histogram() + theme_cowplot()
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(cowplot)
library(factoextra)
library(cluster)
library(NbClust)
chol <- read.table(url("http://assets.datacamp.com/blog_assets/chol.txt"), header = TRUE)
ggplot(data=chol, aes(chol$AGE)) + geom_histogram() + theme_bw()
ggplot(data=chol, aes(chol$AGE)) + geom_histogram() + theme_base()
ggplot(data=chol, aes(chol$AGE)) + geom_histogram() + theme_cowplot()
plot.mpg <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl))) +
geom_point(size=2.5)
plot.mpg
plot.mpg <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl))) +
geom_point(size=2.5) + theme_cowplot()
plot.mpg
library(ggthemr)
install.packages("ggthemr")
library(ggthemr)
install.packages(ggthemr)
install.packages("ggthemr")
library(factoextra)
library(cluster)
library(NbClust)
library("tidyverse")
library(ggplot2)
library("ggthemes")
setwd("/Users//ChrisStroud/Documents/data-science/R/Projects/Airbnb-sf/")
df <- read.csv("data.csv")
####
# Selecting data for analysis
dfscore <- df %>%
select(neighbourhood_cleansed,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value)  %>%
na.omit()
# Rename columns
names(dfscore) <- c("hood","accuracy","cleanliness", "checkin", "communication","location", "value")
# Calculate average scores by neighborhood
dfscore <- dfscore %>%
group_by(hood) %>%
summarise(
accuracy = mean(accuracy),
cleanliness = mean(cleanliness),
checkin = mean(checkin),
communication = mean(communication),
location = mean(location),
value = mean(value)
)
# Create row names
rownames(dfscore) <- dfscore$hood
# Remove hood column
dfscore$hood <- NULL
###
nb <- NbClust(dfscore, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
fviz_nbclust(nb)
p +
theme_minimal()
p <- fviz_nbclust(nb)
p +
theme_minimal()
p +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE)
p +
theme_minimal() +
geom_smooth(method = "lm", se = TRUE)
head(p)
# Final Graph for optimal clusters
p +
theme_minimal() +
scale_color_fivethirtyeight("freq")
p +
theme_minimal() +
labs(
title = "Fuel efficiency generally decreases with engine size",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
p +
theme_minimal() +
scale_colour_solarized("blue") +
labs(
title = "How many clusters ",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
p +
theme_minimal() +
scale_colour_solarized("red") +
labs(
title = "How many clusters ",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
p +
theme_minimal() +
scale_colour_solarized("red") +
labs(
title = "How many clusters should we use? ")
km.res <- kmeans(dfscore, 4, nstart = 25)
plot(dfscore, col = km.res$cluster, pch = 19, frame = FALSE,
main = "K-means with k = 4")
points(km.res$centers, col = 1:4, pch = 8, cex = 3)
km.res <- kmeans(dfscore, 4, nstart = 25)
# k-means group number of each observation
km.res$cluster
# Visualize k-means clusters
fviz_cluster(km.res, data = dfscore, geom = "point",
stand = FALSE, frame.type = "norm")
set.seed(123)
km.res <- kmeans(dfscore, 4, nstart = 25)
# k-means group number of each observation
km.res$cluster
# Visualize k-means clusters
fviz_cluster(km.res, data = dfscore, geom = "point",
stand = FALSE, frame.type = "norm")
set.seed(123)
km.res <- kmeans(dfscore, 4, nstart = 25)
print(km.res)
fviz_cluster(km.res, data = df)
fviz_cluster(km.res, data = dfscore)
library(factoextra)
library(cluster)
library(NbClust)
library("tidyverse")
library(ggplot2)
library("ggthemes")
# K-means clustering
set.seed(123)
km.res <- kmeans(dfscore, 4, nstart = 25)
print(km.res)
fviz_cluster(km.res, data = dfscore)
# How many clusters is optimal?
nb <- NbClust(dfscore, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
p <- fviz_nbclust(nb)
# Final Graph for optimal clusters
p +
theme_minimal() +
scale_colour_solarized("red") +
labs(
title = "How many clusters should we use? ")
set.seed(123)
km.res <- kmeans(dfscore, 4, nstart = 25)
print(km.res)
fviz_cluster(km.res, data = dfscore)
fviz_cluster(km.res, data = dfscore)
print(km.res)
fviz_cluster(km.res)
fviz_cluster(km.res, data = dfscore)
install.packages("factoextra")
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(factoextra)
library(cluster)
library(NbClust)
###
# K-means clustering
set.seed(123)
km.res <- kmeans(dfscore, 4, nstart = 25)
print(km.res)
fviz_cluster(km.res, data = dfscore)
fviz_cluster(km.res, data = dfscore) +   theme_minimal()
fviz_cluster(km.res, data = dfscore, repel = TRUE) +   theme_minimal()
install.packages("ggproto")
fviz_cluster(km.res, data = dfscore, repel = TRUE) +   theme_minimal()
fviz_cluster(km.res,
data = dfscore,
repel = TRUE) +   theme_minimal()
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(factoextra)
library(cluster)
library(NbClust)
install.packages("factoextra")
install.packages("NbClust")
library("tidyverse")
library(ggplot2)
library("ggthemes")
library(factoextra)
library(cluster)
library(NbClust)
setwd("/Users/chrisstroud/Documents/chrisstroud.github.io/projects/Airbnb-sf/")
df <- read.csv("data.csv")
dfscore <- df %>%
select(neighbourhood_cleansed,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value)  %>%
na.omit()
# Rename columns
names(dfscore) <- c("hood","accuracy","cleanliness", "checkin", "communication","location", "value")
# Calculate average scores by neighborhood
dfscore <- dfscore %>%
group_by(hood) %>%
summarise(
accuracy = mean(accuracy),
cleanliness = mean(cleanliness),
checkin = mean(checkin),
communication = mean(communication),
location = mean(location),
value = mean(value)
)
# Create row names
rownames(dfscore) <- dfscore$hood
# Remove hood column
dfscore$hood <- NULL
###
nb <- NbClust(dfscore, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
png(file="number-clusters.png",width=1235,height=752)
p <- fviz_nbclust(nb)
dev.off()
p <- fviz_nbclust(nb)
p +
theme_minimal() +
scale_colour_solarized("red") +
labs(
title = "How many clusters should we use? ")
p +
theme_minimal() +
scale_colour_solarized("red") +
labs(
title = "How many clusters should we use? ")
png(file="number-clusters.png",width=1235,height=752)
p +
theme_minimal() +
scale_colour_solarized("red") +
labs(
title = "How many clusters should we use? ")
dev.off()
